# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cwHFLafiQ226W0AoZn08D9aFgKTHpiyy
"""

!pip install pandas numpy lightgbm scikit-learn

import pandas as pd
import numpy as np
import json
import os
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_auc_score
import lightgbm as lgb

train_flag = pd.read_csv("train_flag.csv")

print(train_flag.head())



import json
import pandas as pd

with open("accounts_data_train.json", "r") as f:
    data = json.load(f)
if isinstance(data, list) and isinstance(data[0], list):
    data = [item for sublist in data for item in sublist if item]

train_accounts = pd.DataFrame(data)

print(train_accounts.columns)
print(train_accounts.head())

accounts_agg = train_accounts.groupby("uid").agg({
    "loan_amount": ["sum", "mean", "count"],
    "amount_overdue": ["sum", "mean", "max"],
}).reset_index()

accounts_agg.columns = ["uid", "total_loan_amount", "avg_loan_amount", "num_loans",
                        "total_overdue", "avg_overdue", "max_overdue"]

print(accounts_agg.head())

import json
import pandas as pd

with open("enquiry_data_train.json", "r") as f:
    data = json.load(f)
if isinstance(data, list) and isinstance(data[0], list):
    data = [item for sublist in data for item in sublist if item]

train_enquiry = pd.DataFrame(data)

print(train_enquiry.columns)
print(train_enquiry.head())

enquiry_agg = train_enquiry.groupby("uid").agg({
    "enquiry_amt": ["sum", "mean", "count"],
}).reset_index()

enquiry_agg.columns = ["uid", "total_enquiry_amt", "avg_enquiry_amt", "num_enquiries"]

print(enquiry_agg.head())

train_df = train_flag.merge(accounts_agg, on="uid", how="left")
train_df = train_df.merge(enquiry_agg, on="uid", how="left")

train_df.fillna(0, inplace=True)

print(train_df.head())

from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_auc_score
import lightgbm as lgb
from lightgbm import early_stopping
from sklearn.preprocessing import LabelEncoder

train_df = train_df.copy()

categorical_columns = train_df.select_dtypes(include=["object"]).columns.tolist()
for col in categorical_columns:
    le = LabelEncoder()
    train_df[col] = le.fit_transform(train_df[col])

X = train_df.drop(columns=["uid", "TARGET"])
y = train_df["TARGET"]

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

lgb_model = lgb.LGBMClassifier(n_estimators=500, learning_rate=0.05, max_depth=6)

lgb_model.fit(
    X_train,
    y_train,
    eval_set=[(X_val, y_val)],
    eval_metric="auc",
    callbacks=[early_stopping(50)]

y_pred = lgb_model.predict_proba(X_val)[:, 1]

roc_auc = roc_auc_score(y_val, y_pred)
print(f"Validation ROC AUC: {roc_auc:.4f}")

import pandas as pd
import numpy as np
import lightgbm as lgb
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import roc_auc_score
from imblearn.over_sampling import SMOTE

df = train_df

if 'NAME_CONTRACT_TYPE' in df.columns:
    le = LabelEncoder()
    df["NAME_CONTRACT_TYPE"] = le.fit_transform(df["NAME_CONTRACT_TYPE"])

df.fillna(0, inplace=True)

loan_features = ["loan_amount", "amount_overdue"]
if set(loan_features).issubset(df.columns):
    loan_agg = df.groupby("uid")[loan_features].agg(["sum", "mean", "max"])
    loan_agg.columns = ["_".join(col) for col in loan_agg.columns]
    df = df.merge(loan_agg, on="uid", how="left")

drop_cols = ["uid"]
df.drop(columns=drop_cols, inplace=True, errors="ignore")

X = df.drop(columns=["TARGET"])
y = df["TARGET"]

smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

X_train, X_val, y_train, y_val = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

lgb_model = lgb.LGBMClassifier(
    n_estimators=1000,
    learning_rate=0.01,
    max_depth=8,
    num_leaves=31,
    class_weight="balanced",
    colsample_bytree=0.8,
    subsample=0.8
)

lgb_model.fit(
    X_train, y_train,
    eval_set=[(X_val, y_val)],
    eval_metric="auc",
    categorical_feature=["NAME_CONTRACT_TYPE"] if "NAME_CONTRACT_TYPE" in X.columns else None,
    callbacks=[lgb.early_stopping(50)]
)

y_pred = lgb_model.predict_proba(X_val)[:, 1]

roc_auc = roc_auc_score(y_val, y_pred)
print(f"Validation ROC AUC: {roc_auc:.4f}")

feature_importance = pd.DataFrame({
    "Feature": X_train.columns,
    "Importance": lgb_model.feature_importances_
}).sort_values(by="Importance", ascending=False)

print("Top Features:\n", feature_importance.head(10))

import matplotlib.pyplot as plt
lgb.plot_importance(lgb_model, max_num_features=10)
plt.show()

import json
import pandas as pd

with open("accounts_data_test.json", "r") as f:
    data = json.load(f)

if isinstance(data, list) and isinstance(data[0], list):
    data = [item for sublist in data for item in sublist if item]

test_accounts = pd.DataFrame(data)

with open("enquiry_data_test.json", "r") as f:
    data = json.load(f)  # Load as Python object

if isinstance(data, list) and isinstance(data[0], list):
    data = [item for sublist in data for item in sublist if item]  # Flatten & remove None

test_enquiry = pd.DataFrame(data)

import pandas as pd
import lightgbm as lgb
import json

test_flag = pd.read_csv("test_flag.csv")
test_flag["NAME_CONTRACT_TYPE"] = test_flag["NAME_CONTRACT_TYPE"].astype("category")

test_accounts_agg = test_accounts.groupby("uid").agg({
    "loan_amount": ["sum", "mean", "count"],
    "amount_overdue": ["sum", "mean", "max"]
}).reset_index()
test_accounts_agg.columns = ["_".join(col).strip("_") for col in test_accounts_agg.columns]

test_enquiry_agg = test_enquiry.groupby("uid").size().reset_index(name="enquiry_count")

test_df = test_flag.merge(test_accounts_agg, on="uid", how="left")
test_df = test_df.merge(test_enquiry_agg, on="uid", how="left")
for col in test_df.select_dtypes(include=["category"]).columns:
    test_df[col] = test_df[col].astype(str).fillna("Missing")

for col in test_df.select_dtypes(include=["number"]).columns:
    test_df[col] = test_df[col].fillna(0)


X_test = test_df.drop(columns=["uid"])
missing_cols = set(X_train.columns) - set(X_test.columns)

for col in missing_cols:
    X_test[col] = 0

X_test = X_test[X_train.columns]


X_test = X_test[X_train.columns]
from sklearn.preprocessing import LabelEncoder

cat_cols = X_test.select_dtypes(include=['object']).columns

for col in cat_cols:
    le = LabelEncoder()
    X_test[col] = le.fit_transform(X_test[col].astype(str))


test_df["pred"] = lgb_model.predict_proba(X_test)[:, 1]

test_df[["uid", "pred"]].to_csv("submission.csv", index=False)

print("Submission file 'submission.csv' generated successfully!")

test_df[["uid", "pred"]]

